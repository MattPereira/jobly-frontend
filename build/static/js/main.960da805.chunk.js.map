{"version":3,"sources":["auth/UserContext.js","homepage/Homepage.js","api/api.js","companies/CompanyCard.js","common/LoadingSpinner.js","common/SearchForm.js","companies/CompanyList.js","jobs/JobCard.js","jobs/JobCardList.js","companies/CompanyDetails.js","jobs/JobList.js","jobs/AppliedJobList.js","auth/LoginForm.js","auth/SignupForm.js","profiles/EditProfileForm.js","routes-navigation/PrivateRoute.js","companies/EditCompanyForm.js","routes-navigation/Routes.js","routes-navigation/Navigation.js","hooks/useLocalStorage.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","Homepage","currentUser","useContext","react_default","a","createElement","className","concat","firstName","lastName","Fragment","react_router_dom","to","JoblyApi","endpoint","data","method","console","debug","url","process","headers","Authorization","token","params","axios","error","_context","t0","response","message","Array","isArray","username","this","request","res","user","company","name","companies","handle","log","companyData","Object","objectSpread","title","jobs","jobId","CompanyCard","_ref","description","logoUrl","reactstrap_module","body","tag","src","alt","LoadingSpinner","SearchForm","searchFor","_useState","useState","_useState2","slicedToArray","searchTerm","setSearchTerm","onSubmit","e","preventDefault","trim","undefined","id","placeholder","bsSize","value","onChange","target","type","color","size","CompanyList","setCompanies","_search","asyncToGenerator","CompanyList_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","getCompanies","sent","stop","apply","arguments","useEffect","_fetchAllCompanies","_callee","fetchAllCompanies","common_SearchForm","_x","length","map","c","src_companies_CompanyCard","key","common_LoadingSpinner","JobCard","salary","equity","companyName","companyHandle","_useContext","hasAppliedToJob","applyToJob","unApplyToJob","applied","setApplied","_handleApply","JobCard_regeneratorRuntime","abrupt","_handleUnapply","bordered","scope","onClick","_x2","JobCardList","job","jobs_JobCard","CompanyDetails","useParams","setCompany","_getCompany","CompanyDetails_regeneratorRuntime","getCompany","t1","numEmployees","jobs_JobCardList","JobList","setJobs","JobList_regeneratorRuntime","getJobs","_fetchJobs","fetchJobs","AppliedJobList","AppliedJobList_regeneratorRuntime","appliedToJobs","filter","applications","includes","LoginForm","login","history","useHistory","password","formData","setFormData","_useState3","_useState4","formErrors","setFormErrors","handleChange","_e$target","fData","defineProperty","handleSubmit","_ref2","LoginForm_regeneratorRuntime","result","success","push","errors","htmlFor","required","autoComplete","err","SignupForm","signup","email","SignupForm_regeneratorRuntime","EditProfileForm","setCurrentUser","_useState5","_useState6","updateConfirmed","setUpdateConfirmed","EditProfileForm_regeneratorRuntime","profileData","updatedUser","updateProfile","PrivateRoute","exact","path","children","react_router","EditCompanyForm","localStorage","getItem","EditCompanyForm_regeneratorRuntime","updateCompany","Routes","homepage_Homepage","auth_LoginForm","auth_SignupForm","routes_navigation_PrivateRoute","companies_CompanyList","companies_CompanyDetails","companies_EditCompanyForm","jobs_JobList","jobs_AppliedJobList","profiles_EditProfileForm","Navigation","logout","isOpen","setIsOpen","dark","expand","light","RRNavLink","navbar","useLocalStorage","defaultValue","initialValue","item","setItem","removeItem","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","_useLocalStorage","_useLocalStorage2","setToken","_signup","App_regeneratorRuntime","signupData","_token","_login","_callee3","loginData","_token2","_context3","sucess","has","_getCurrentUser","_jwt$decode","_currentUser","jwt","decode","getCurrentUser","auth_UserContext","Provider","toConsumableArray","src_routes_navigation_Navigation","routes_navigation_Routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gkBAMeA,EAFKC,IAAMC,gBC2BXC,EA3BE,WAAM,IACbC,EAAgBC,qBAAWL,GAA3BI,YAER,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,SACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,yDAIAH,EAAAC,EAAAC,cAAA,SACG,IACAJ,EAAW,iBAAAM,OACON,EAAYO,UADnB,KAAAD,OACgCN,EAAYQ,SAD5C,KAGVN,EAAAC,EAAAC,cAAAF,EAAAC,EAAAM,SAAA,KACEP,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,WAAT,UACAT,EAAAC,EAAAC,cAAA,oBAHF,IAGoBF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,UAAT,SAClBT,EAAAC,EAAAC,cAAA,kBAED,o0MCvBX,IA4GeQ,+IA9FQC,sGAAUC,iCAAO,GAAIC,iCAAS,MACjDC,QAAQC,MAAM,YAAaJ,EAAUC,EAAMC,GAIrCG,YAnBOC,4DAmBcN,GACrBO,EAAU,CAAEC,cAAa,UAAAf,OAAYM,EAASU,QAC9CC,EAAoB,QAAXR,EAAmBD,EAAO,qBAGzBU,IAAM,CAAEN,MAAKH,SAAQD,OAAMS,SAAQH,mDAAYN,8CAE7DE,QAAQS,MAAM,aAAcC,EAAAC,GAAIC,UAC5BC,EAAUH,EAAAC,GAAIC,SAASd,KAAKW,MAAMI,QAChCC,MAAMC,QAAQF,GAAWA,EAAU,CAACA,+LAMlBG,yFACVC,KAAKC,QAAL,SAAA5B,OAAsB0B,kBAAlCG,2BACGA,EAAIC,uLAIcJ,EAAUlB,yFACnBmB,KAAKC,QAAL,SAAA5B,OAAsB0B,GAAYlB,EAAM,uBAApDqB,2BACGA,EAAIE,2LAKaC,yFACRL,KAAKC,QAAQ,YAAa,CAAEI,KAAMA,kBAA9CH,2BACGA,EAAII,yLAKWC,yFACNP,KAAKC,QAAL,aAAA5B,OAA0BkC,kBAAtCL,SACJnB,QAAQyB,IAAIN,qBACLA,EAAIE,0LAKcG,EAAQE,yFACjBT,KAAKC,QAAL,aAAA5B,OACDkC,GADCG,OAAAC,EAAA,EAAAD,CAAA,GAETD,GACL,uBAHEP,SAKJnB,QAAQyB,IAAIN,qBACLA,EAAIE,sLAKQQ,yFACHZ,KAAKC,QAAQ,OAAQ,CAAEW,MAAOA,kBAA1CV,2BACGA,EAAIW,oLAIWd,EAAUe,mFAC1Bd,KAAKC,QAAL,SAAA5B,OAAsB0B,EAAtB,UAAA1B,OAAuCyC,GAAS,GAAI,0LAIlCf,EAAUe,mFAC5Bd,KAAKC,QAAL,SAAA5B,OAAsB0B,EAAtB,UAAA1B,OAAuCyC,EAAvC,YAAwD,GAAI,oLAIhDjC,yFACFmB,KAAKC,QAAL,gBAA8BpB,EAAM,sBAAhDqB,2BACGA,EAAIb,gLAIMR,yFACDmB,KAAKC,QAAL,aAA2BpB,EAAM,sBAA7CqB,2BACGA,EAAIb,0HChEA0B,UAtBK,SAAAC,GAA4C,IAAzCT,EAAyCS,EAAzCT,OAAQF,EAAiCW,EAAjCX,KAAMY,EAA2BD,EAA3BC,YAAaC,EAAcF,EAAdE,QAChD,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAE,cAAAL,OAAgBkC,GAAUnC,UAAU,oBAC1CH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAMC,MAAI,EAAChD,UAAU,oBACnBH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWE,IAAI,MAAMhB,GACpBa,GACCjD,EAAAC,EAAAC,cAAA,OACEmD,IAAKJ,EACLK,IAAG,GAAAlD,OAAKkC,EAAL,SACHnC,UAAU,0BAGdH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KAAWF,gBCRRO,MAff,WACE,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,gBCyCKsD,EAxCI,SAAAT,GAAmB,IAAhBU,EAAgBV,EAAhBU,UACpB3C,QAAQC,MAAM,aAAc,oBAAqB0C,GADb,IAAAC,EAGAC,mBAAS,IAHTC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAG7BI,EAH6BF,EAAA,GAGjBG,EAHiBH,EAAA,GAiBpC,OACE5D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAMc,SAbW,SAACC,GACpBA,EAAEC,iBACFT,EAAUK,EAAWK,aAAUC,GAC/BL,EAAcD,EAAWK,SAUOhE,UAAU,gBACtCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACEmB,GAAG,aACHjC,KAAK,aACLkC,YAAY,sBACZC,OAAO,KACPC,MAAOV,EACPW,SAdW,SAACR,GACpBF,EAAcE,EAAES,OAAOF,WAgBnBxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAQyB,KAAK,SAASC,MAAM,YAAYC,KAAK,MAA7C,+xMC7BV,IA8CeC,EA9CK,WAClBhE,QAAQC,MAAM,eADU,IAAA2C,EAGUC,mBAAS,MAHnBC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAGjBrB,EAHiBuB,EAAA,GAGNmB,EAHMnB,EAAA,YAAAoB,IAAA,OAAAA,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAyC,IAAAC,KAgBxB,SAAAC,EAAsBhD,GAAtB,IAAAC,EAAA,OAAA6C,IAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACwB9E,EAAS+E,aAAarD,GAD9C,OACMC,EADNiD,EAAAI,KAEEX,EAAa1C,GAFf,wBAAAiD,EAAAK,SAAAP,OAhBwBQ,MAAA7D,KAAA8D,WAqBxB,OAfAC,oBAAU,WAA+B,SAAAC,IAAA,OAAAA,EAAAtD,OAAAwC,EAAA,EAAAxC,CAAAyC,IAAAC,KAGvC,SAAAa,IAAA,IAAA3D,EAAA,OAAA6C,IAAAG,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,cAAAhE,EAAAgE,KAAA,EACwB9E,EAAS+E,eADjC,OACMpD,EADNb,EAAAkE,KAEEX,EAAa1C,GAFf,wBAAAb,EAAAmE,SAAAK,OAHuCJ,MAAA7D,KAAA8D,WACvC/E,QAAQC,MAAM,6CADyB,WAAAgF,EAAAH,MAAA7D,KAAA8D,WAOvCI,IACC,IAOE5D,EAGHrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACbH,EAAAC,EAAAC,cAACgG,EAAD,CAAYzC,UAzBQ,SAAA0C,GAAA,OAAAnB,EAAAY,MAAA7D,KAAA8D,cA2BnBxD,EAAU+D,OACTpG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZkC,EAAUgE,IAAI,SAACC,GAAD,OACbtG,EAAAC,EAAAC,cAACqG,EAAD,CACEC,IAAKF,EAAEhE,OACPA,OAAQgE,EAAEhE,OACVF,KAAMkE,EAAElE,KACRY,YAAasD,EAAEtD,YACfC,QAASqD,EAAErD,aAKjBjD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,kCAnBiBH,EAAAC,EAAAC,cAACuG,EAAD,wxMChBzB,IA2EeC,EA3EC,SAAA3D,GAA+D,IAA5DsB,EAA4DtB,EAA5DsB,GAAI1B,EAAwDI,EAAxDJ,MAAOgE,EAAiD5D,EAAjD4D,OAAQC,EAAyC7D,EAAzC6D,OAAQC,EAAiC9D,EAAjC8D,YAAaC,EAAoB/D,EAApB+D,cACzDhG,QAAQC,MAAM,WAD+D,IAAAgG,EAGvBhH,qBAAWL,GAAzDsH,EAHqED,EAGrEC,gBAAiBC,EAHoDF,EAGpDE,WAAYC,EAHwCH,EAGxCG,aAHwCxD,EAI/CC,oBAAS,GAJsCC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAItEyD,EAJsEvD,EAAA,GAI7DwD,EAJ6DxD,EAAA,YAAAyD,IAAA,OAAAA,EAAA5E,OAAAwC,EAAA,EAAAxC,CAAA6E,IAAAnC,KAgB7E,SAAAa,EAA2B/B,GAA3B,OAAAqD,IAAAjC,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,WACMwB,EAAgB3C,GADtB,CAAA7C,EAAAgE,KAAA,eAAAhE,EAAA+F,OAAA,iBAEEN,EAAW5C,GACX+C,GAAW,GAHb,wBAAA5F,EAAAmE,SAAAK,OAhB6EJ,MAAA7D,KAAA8D,WAAA,SAAA2B,IAAA,OAAAA,EAAA/E,OAAAwC,EAAA,EAAAxC,CAAA6E,IAAAnC,KAuB7E,SAAAC,EAA6BnB,GAA7B,OAAAqD,IAAAjC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACMwB,EAAgB3C,KAClB6C,EAAa7C,GACb+C,GAAW,IAHf,wBAAA9B,EAAAK,SAAAP,OAvB6EQ,MAAA7D,KAAA8D,WA8B7E,OAxBAC,oBACE,WACEhF,QAAQC,MAAM,wCAAyC,SAAUsD,GAEjE+C,EAAWJ,EAAgB3C,KAE7B,CAACA,EAAI2C,IAmBLhH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/C,UAAU,oBACdH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWE,IAAI,KAAKjD,UAAU,QAC3BwC,GAEH3C,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAc/C,UAAU,kBAAkBiD,IAAI,MAC5CpD,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAE,cAAAL,OAAgB0G,IAAkBD,IAE5C7G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOuE,UAAQ,GACbzH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIwH,MAAM,OAAV,UACA1H,EAAAC,EAAAC,cAAA,cAAMyG,IAER3G,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIwH,MAAM,OAAV,UACA1H,EAAAC,EAAAC,cAAA,UAAK0G,EAAM,GAAAxG,OAAMwG,EAAN,KAAkB,WAIlCO,EACCnH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE0B,MAAM,SACNzE,UAAU,oBACVwH,QAxDiE,SAAAC,GAAA,OAAAJ,EAAA5B,MAAA7D,KAAA8D,aAqDnE,WAQA7F,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE0B,MAAM,UACNzE,UAAU,oBACVwH,QAhEiE,SAAAxB,GAAA,OAAAkB,EAAAzB,MAAA7D,KAAA8D,aA6DnE,aClDGgC,EApBK,SAAA9E,GAAc,IAAXH,EAAWG,EAAXH,KAGrB,OAFA9B,QAAQC,MAAM,cAAe,QAAS6B,GAGpC5C,EAAAC,EAAAC,cAAA,WACG0C,EAAKyD,IAAI,SAACyB,GAAD,OACR9H,EAAAC,EAAAC,cAAC6H,EAAD,CACEvB,IAAKsB,EAAIzD,GACTA,GAAIyD,EAAIzD,GACR1B,MAAOmF,EAAInF,MACXgE,OAAQmB,EAAInB,OACZC,OAAQkB,EAAIlB,OACZC,YAAaiB,EAAIjB,YACjBC,cAAegB,EAAIhB,qyMCP7B,IAuDekB,EAvDQ,WAAM,IACnB1F,EAAW2F,cAAX3F,OAERxB,QAAQC,MAAM,iBAAkB,UAAWuB,GAHhB,IAAAoB,EAIGC,mBAAS,MAJZC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAIpBvB,EAJoByB,EAAA,GAIXsE,EAJWtE,EAAA,GAmB3B,OAZAkC,oBACE,WAA6B,SAAAqC,IAAA,OAAAA,EAAA1F,OAAAwC,EAAA,EAAAxC,CAAA2F,IAAAjD,KAG3B,SAAAa,IAAA,OAAAoC,IAAA/C,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,cAAAhE,EAAAC,GACEyG,EADF1G,EAAAgE,KAAA,EACmB9E,EAAS2H,WAAW/F,GADvC,OAAAd,EAAA8G,GAAA9G,EAAAkE,MAAA,EAAAlE,EAAAC,IAAAD,EAAA8G,IAAA,wBAAA9G,EAAAmE,SAAAK,OAH2BJ,MAAA7D,KAAA8D,WAC3B/E,QAAQC,MAAM,8CADa,WAAAoH,EAAAvC,MAAA7D,KAAA8D,WAM3BwC,IAEF,CAAC/F,IAGEH,EAGHnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/C,UAAU,+DACdH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACGf,EAAQc,SACPjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OACEmD,IAAKlB,EAAQc,QACbK,IAAG,GAAAlD,OAAKkC,EAAL,SACHnC,UAAU,oBAKhBH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWE,IAAI,MAAMjB,EAAQC,MAC7BpC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAWE,IAAI,MAAf,oBACoBjB,EAAQoG,aAAepG,EAAQoG,aAAe,KAGlEvI,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAU/C,UAAU,QAAQgC,EAAQa,aACpChD,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAE,cAAAL,OAAgB+B,EAAQG,OAAxB,UACNtC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAQ0B,MAAM,UAAUzE,UAAU,qBAAlC,2BAMNH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACsI,EAAD,CAAa5F,KAAMT,EAAQS,SA9BZ5C,EAAAC,EAAAC,cAACuG,EAAD,wxMCrBvB,IAkCegC,EAlCC,WACd3H,QAAQC,MAAM,WADM,IAAA2C,EAGIC,mBAAS,MAHbC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAGbd,EAHagB,EAAA,GAGP8E,EAHO9E,EAAA,YAAAoB,IAAA,OAAAA,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAkG,IAAAxD,KAiBpB,SAAAC,EAAsBhD,GAAtB,IAAAQ,EAAA,OAAA+F,IAAAtD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACmB9E,EAASkI,QAAQxG,GADpC,OACMQ,EADN0C,EAAAI,KAEEgD,EAAQ9F,GAFV,wBAAA0C,EAAAK,SAAAP,OAjBoBQ,MAAA7D,KAAA8D,WAsBpB,OAhBAC,oBAAU,WAA0B,SAAA+C,IAAA,OAAAA,EAAApG,OAAAwC,EAAA,EAAAxC,CAAAkG,IAAAxD,KAElC,SAAAa,IAAA,IAAApD,EAAA,OAAA+F,IAAAtD,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,cAAAhE,EAAAgE,KAAA,EACmB9E,EAASkI,UAD5B,OACMhG,EADNpB,EAAAkE,KAEEgD,EAAQ9F,GAFV,wBAAApB,EAAAmE,SAAAK,OAFkCJ,MAAA7D,KAAA8D,WAClC/E,QAAQC,MAAM,oCADoB,WAAA8H,EAAAjD,MAAA7D,KAAA8D,WAOlCiD,IACC,IAQElG,EAGH5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACgG,EAAD,CAAYzC,UA3BE,SAAA0C,GAAA,OAAAnB,EAAAY,MAAA7D,KAAA8D,cA4BbjD,EAAKwD,OAASpG,EAAAC,EAAAC,cAACsI,EAAD,CAAa5F,KAAMA,IAAW5C,EAAAC,EAAAC,cAAA,gCANjCF,EAAAC,EAAAC,cAACuG,EAAD,wxMCtBpB,IA0CesC,EA1CQ,WACrBjI,QAAQC,MAAM,kBADa,IAGnBjB,EAAgBC,qBAAWL,GAA3BI,YAHmB4D,EAKHC,mBAAS,MALNC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAKpBd,EALoBgB,EAAA,GAKd8E,EALc9E,EAAA,GAwB3B,OAhBAkC,oBAAU,WAA0B,SAAA+C,IAAA,OAAAA,EAAApG,OAAAwC,EAAA,EAAAxC,CAAAuG,IAAA7D,KAElC,SAAAa,IAAA,IAAApD,EAAAqG,EAAA,OAAAD,IAAA3D,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,cAAAhE,EAAAgE,KAAA,EACmB9E,EAASkI,UAD5B,OACMhG,EADNpB,EAAAkE,KAGQuD,EAAgBrG,EAAKsG,OAAO,SAACpB,GAAD,OAChChI,EAAYqJ,aAAaC,SAAStB,EAAIzD,MAExCqE,EAAQO,GANV,wBAAAzH,EAAAmE,SAAAK,OAFkCJ,MAAA7D,KAAA8D,WAClC/E,QAAQC,MAAM,oCADoB,WAAA8H,EAAAjD,MAAA7D,KAAA8D,WAWlCiD,IACC,IAEHhI,QAAQyB,IAAI,4BAA6BzC,EAAYqJ,cAEhDvG,EAGH5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,oCACoCL,EAAYgC,UAEhD9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZyC,EAAKwD,OACJpG,EAAAC,EAAAC,cAACsI,EAAD,CAAa5F,KAAMA,IAEnB5C,EAAAC,EAAAC,cAAA,sCAXUF,EAAAC,EAAAC,cAACuG,EAAD,gyMChBpB,IA+Fe4C,EA/FG,SAAAtG,GAAe,IAAZuG,EAAYvG,EAAZuG,MACbC,EAAUC,cADe9F,EAECC,mBAAS,CACvC7B,SAAU,GACV2H,SAAU,KAJmB7F,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAExBgG,EAFwB9F,EAAA,GAEd+F,EAFc/F,EAAA,GAAAgG,EAOKjG,mBAAS,IAPdkG,EAAApH,OAAAoB,EAAA,EAAApB,CAAAmH,EAAA,GAOxBE,EAPwBD,EAAA,GAOZE,EAPYF,EAAA,GAS/B/I,QAAQC,MACN,YACA,gBACOuI,EACP,YACAI,EACA,cACAI,GAIF,IAAME,EAAe,SAAC/F,GAAM,IAAAgG,EACFhG,EAAES,OAAlBtC,EADkB6H,EAClB7H,KAAMoC,EADYyF,EACZzF,MAEdmF,EAAY,SAACO,GAAD,OAAAzH,OAAAC,EAAA,EAAAD,CAAA,GACPyH,EADOzH,OAAA0H,EAAA,EAAA1H,CAAA,GAETL,EAAOoC,OAIN4F,EAAY,eAAAC,EAAA5H,OAAAwC,EAAA,EAAAxC,CAAA6H,IAAAnF,KAAG,SAAAa,EAAO/B,GAAP,IAAAsG,EAAA,OAAAD,IAAAjF,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,cACnBvB,EAAEC,iBADiB1C,EAAAgE,KAAA,EAEA8D,EAAMI,GAFN,QAEfa,EAFe/I,EAAAkE,MAGR8E,QACTjB,EAAQkB,KAAK,KAEbV,EAAcQ,EAAOG,QANJ,wBAAAlJ,EAAAmE,SAAAK,MAAH,gBAAAG,GAAA,OAAAkE,EAAAzE,MAAA7D,KAAA8D,YAAA,GAUlB,OACE7F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/C,UAAU,aACdH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAW/C,UAAU,yBAArB,SAEAH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAMc,SAAUoG,GACdpK,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,YAAf,YACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,WACHjC,KAAK,WACLuC,KAAK,OACLF,SAAUuF,EACVY,UAAQ,EACRC,aAAa,cAGjB7K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,YAAf,YACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,WACHjC,KAAK,WACLuC,KAAK,WACLF,SAAUuF,EACVY,UAAQ,EACRC,aAAa,sBAIhBf,EAAW1D,OACR0D,EAAWzD,IAAI,SAACyE,GAAD,OACb9K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAO0B,MAAM,SAAS4B,IAAKsE,GACxBA,KAGL,KAEJ9K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kCAAlB,myMClFlB,IAwIe4K,EAxII,SAAAhI,GAAgB,IAAbiI,EAAajI,EAAbiI,OACdzB,EAAUC,cADiB9F,EAEDC,mBAAS,CACvC7B,SAAU,GACV2H,SAAU,GACVpJ,UAAW,GACXC,SAAU,GACV2K,MAAO,KAPwBrH,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAE1BgG,EAF0B9F,EAAA,GAEhB+F,EAFgB/F,EAAA,GAAAgG,EAUGjG,mBAAS,IAVZkG,EAAApH,OAAAoB,EAAA,EAAApB,CAAAmH,EAAA,GAU1BE,EAV0BD,EAAA,GAUdE,EAVcF,EAAA,GAYjC/I,QAAQC,MACN,aACA,iBACOiK,EACP,YACAtB,EACA,cACAI,GAIF,IAAME,EAAe,SAAC/F,GAAM,IAAAgG,EACFhG,EAAES,OAAlBtC,EADkB6H,EAClB7H,KAAMoC,EADYyF,EACZzF,MAEdmF,EAAY,SAACO,GAAD,OAAAzH,OAAAC,EAAA,EAAAD,CAAA,GACPyH,EADOzH,OAAA0H,EAAA,EAAA1H,CAAA,GAETL,EAAOoC,OAIN4F,EAAY,eAAAC,EAAA5H,OAAAwC,EAAA,EAAAxC,CAAAyI,IAAA/F,KAAG,SAAAa,EAAO/B,GAAP,IAAAsG,EAAA,OAAAW,IAAA7F,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,cACnBvB,EAAEC,iBADiB1C,EAAAgE,KAAA,EAGAwF,EAAOtB,GAHP,QAGfa,EAHe/I,EAAAkE,MAIR8E,QACTjB,EAAQkB,KAAK,KAEbV,EAAcQ,EAAOG,QAPJ,wBAAAlJ,EAAAmE,SAAAK,MAAH,gBAAAG,GAAA,OAAAkE,EAAAzE,MAAA7D,KAAA8D,YAAA,GAWlB,OACE7F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/C,UAAU,aACdH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAW/C,UAAU,yBAArB,YAEAH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAMc,SAAUoG,GACdpK,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,YAAf,YACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACEmB,GAAG,WACHjC,KAAK,WACLuC,KAAK,OACLH,MAAOkF,EAAS5H,SAChB2C,SAAUuF,EACVY,UAAQ,EACRzK,UAAU,eACV0K,aAAa,cAGjB7K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,YAAf,YACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,WACHjC,KAAK,WACLuC,KAAK,WACLH,MAAOkF,EAASD,SAChBhF,SAAUuF,EACVY,UAAQ,EACRC,aAAa,sBAGjB7K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,aAAf,cACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,YACHjC,KAAK,YACLuC,KAAK,OACLH,MAAOkF,EAASrJ,UAChBoE,SAAUuF,EACVY,UAAQ,KAGZ5K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,YAAf,aACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,WACHjC,KAAK,WACLuC,KAAK,OACLH,MAAOkF,EAASpJ,SAChBmE,SAAUuF,EACVY,UAAQ,KAGZ5K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,SAAf,SACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,QACHjC,KAAK,QACLuC,KAAK,OACLH,MAAOkF,EAASuB,MAChBxG,SAAUuF,EACVY,UAAQ,KAGXd,EAAW1D,OACR0D,EAAWzD,IAAI,SAACyE,GAAD,OACb9K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAO0B,MAAM,SAAS4B,IAAKsE,GACxBA,KAGL,KAEJ9K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kCAAlB,qyMCzHlB,IAsKegL,EAtKS,WAAM,IAAApE,EACYhH,qBAAWL,GAA3CI,EADoBiH,EACpBjH,YAAasL,EADOrE,EACPqE,eADO1H,EAGIC,mBAAS,CACvCtD,UAAWP,EAAYO,UACvBC,SAAUR,EAAYQ,SACtB2K,MAAOnL,EAAYmL,MACnBnJ,SAAUhC,EAAYgC,SACtB2H,SAAU,KARgB7F,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAGrBgG,EAHqB9F,EAAA,GAGX+F,EAHW/F,EAAA,GAAAgG,EAWQjG,mBAAS,IAXjBkG,EAAApH,OAAAoB,EAAA,EAAApB,CAAAmH,EAAA,GAWrBE,EAXqBD,EAAA,GAWTE,EAXSF,EAAA,GAAAwB,EAYkB1H,oBAAS,GAZ3B2H,EAAA7I,OAAAoB,EAAA,EAAApB,CAAA4I,EAAA,GAYrBE,EAZqBD,EAAA,GAYJE,EAZIF,EAAA,GAc5BxK,QAAQC,MACN,cACA,eACAjB,EACA,YACA4J,EACA,cACAI,EACA,mBACAyB,GAIF,IAAMvB,EAAe,SAAC/F,GAAM,IAAAgG,EACFhG,EAAES,OAAlBtC,EADkB6H,EAClB7H,KAAMoC,EADYyF,EACZzF,MAEdmF,EAAY,SAACO,GAAD,OAAAzH,OAAAC,EAAA,EAAAD,CAAA,GACPyH,EADOzH,OAAA0H,EAAA,EAAA1H,CAAA,GAETL,EAAOoC,MAEVuF,EAAc,KAWVK,EAAY,eAAArH,EAAAN,OAAAwC,EAAA,EAAAxC,CAAAgJ,IAAAtG,KAAG,SAAAa,EAAO/B,GAAP,IAAAyH,EAAA5J,EAAA6J,EAAA,OAAAF,IAAApG,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,cACnBvB,EAAEC,iBAEEwH,EAAc,CAChBrL,UAAWqJ,EAASrJ,UACpBC,SAAUoJ,EAASpJ,SACnB2K,MAAOvB,EAASuB,MAChBxB,SAAUC,EAASD,UAGjB3H,EAAW4H,EAAS5H,SAVLN,EAAA+D,KAAA,EAAA/D,EAAAgE,KAAA,EAcG9E,EAASkL,cAAc9J,EAAU4J,GAdpC,OAcjBC,EAdiBnK,EAAAkE,KAAAlE,EAAAgE,KAAA,uBAAAhE,EAAA+D,KAAA,EAAA/D,EAAAC,GAAAD,EAAA,SAiBjBuI,EAAavI,EAAAC,IAjBID,EAAA+F,OAAA,kBAqBnBoC,EAAY,SAACO,GAAD,OAAAzH,OAAAC,EAAA,EAAAD,CAAA,GAAiByH,EAAjB,CAAwBT,SAAU,OAC9CM,EAAc,IACdyB,GAAmB,GAGnBJ,EAAeO,GA1BI,yBAAAnK,EAAAmE,SAAAK,EAAA,iBAAH,gBAAAG,GAAA,OAAApD,EAAA6C,MAAA7D,KAAA8D,YAAA,GA6BlB,OACE7F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/C,UAAU,aACdH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAW/C,UAAU,yBAArB,gBAIAH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAMc,SAAUoG,GACdpK,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,YAAf,aAAqCjB,EAAS5H,WAGhD9B,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,aAAf,cACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,YACHjC,KAAK,YACLuC,KAAK,OACLF,SAAUuF,EACVxF,MAAOkF,EAASrJ,UAChBuK,UAAQ,KAGZ5K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,YAAf,aACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,WACHjC,KAAK,WACLuC,KAAK,OACLF,SAAUuF,EACVxF,MAAOkF,EAASpJ,SAChBsK,UAAQ,KAGZ5K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,SAAf,SACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,QACHjC,KAAK,QACLuC,KAAK,OACLF,SAAUuF,EACVxF,MAAOkF,EAASuB,MAChBJ,aAAa,QACbD,UAAQ,KAGZ5K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,YAAf,YACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,WACHjC,KAAK,WACLuC,KAAK,WACLF,SAAUuF,EACVxF,MAAOkF,EAASD,SAChBmB,UAAQ,EACRC,aAAa,sBAIhBf,EAAW1D,OACR0D,EAAWzD,IAAI,SAACyE,GAAD,OACb9K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOsD,IAAKsE,EAAKlG,MAAM,UACpBkG,KAGL,KAEHS,EACCvL,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyB,KAAK,WAAZ,gCACE,KAEJ3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kCAAlB,kBC9IH0L,EAxBM,SAAA9I,GAA+B,IAA5B+I,EAA4B/I,EAA5B+I,MAAOC,EAAqBhJ,EAArBgJ,KAAMC,EAAejJ,EAAfiJ,SAC3BlM,EAAgBC,qBAAWL,GAA3BI,YAYR,OAVAgB,QAAQC,MACN,eACA,SACA+K,EACA,QACAC,EACA,eACAjM,GAGGA,EAKHE,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAOH,MAAOA,EAAOC,KAAMA,GACxBC,GALIhM,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAUxL,GAAG,6xMCKxB,IAmLeyL,EAnLS,WAAM,IACpB5J,EAAW2F,cAAX3F,OACFiH,EAAUC,cAEVpI,EAAQ+K,aAAaC,QAAQ,eACnCtL,QAAQyB,IAAInB,GALgB,IAAAsC,EA8BIC,mBAAS,CACvCvB,KAAM,GACNY,YAAa,GACbuF,aAAc,GACdtF,QAAS,KAlCiBW,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GA8BrBgG,EA9BqB9F,EAAA,GA8BX+F,EA9BW/F,EAAA,GAAAgG,EAqCQjG,mBAAS,IArCjBkG,EAAApH,OAAAoB,EAAA,EAAApB,CAAAmH,EAAA,GAqCrBE,EArCqBD,EAAA,GAqCTE,EArCSF,EAAA,GAuC5B/I,QAAQC,MACN,kBACA,YACA2I,EACA,cACAI,GAIF,IAAME,EAAe,SAAC/F,GAAM,IAAAgG,EACFhG,EAAES,OAAlBtC,EADkB6H,EAClB7H,KAAMoC,EADYyF,EACZzF,MAEdmF,EAAY,SAACO,GAAD,OAAAzH,OAAAC,EAAA,EAAAD,CAAA,GACPyH,EADOzH,OAAA0H,EAAA,EAAA1H,CAAA,GAETL,EAAOoC,MAEVuF,EAAc,KAWVK,EAAY,eAAArH,EAAAN,OAAAwC,EAAA,EAAAxC,CAAA4J,IAAAlH,KAAG,SAAAa,EAAO/B,GAAP,IAAAzB,EAAA,OAAA6J,IAAAhH,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,cACnBvB,EAAEC,iBAEE1B,EAAc,CAChBJ,KAAMsH,EAAStH,KACfY,YAAa0G,EAAS1G,YACtBuF,cAAemB,EAASnB,aACxBtF,QAASyG,EAASzG,SAGpBnC,QAAQyB,IAAIC,GAVOhB,EAAA+D,KAAA,EAAA/D,EAAAgE,KAAA,EAaX9E,EAAS4L,cAAchK,EAAQE,GAbpB,OAcjB+G,EAAQkB,KAAR,cAAArK,OAA2BkC,IAdVd,EAAAgE,KAAA,uBAAAhE,EAAA+D,KAAA,EAAA/D,EAAAC,GAAAD,EAAA,SAiBjBuI,EAAavI,EAAAC,IAjBID,EAAA+F,OAAA,kBAsBnBwC,EAAc,IAtBK,yBAAAvI,EAAAmE,SAAAK,EAAA,iBAAH,gBAAAG,GAAA,OAAApD,EAAA6C,MAAA7D,KAAA8D,YAAA,GAyBlB,OACE7F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/C,UAAU,aACdH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAW/C,UAAU,yBAArB,gBAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBmC,GACvCtC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAMc,SAAUoG,GACdpK,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,QAAf,kBACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,OACHjC,KAAK,OACLuC,KAAK,OACLF,SAAUuF,EACVxF,MAAOkF,EAAStH,KAChBwI,UAAQ,KAIZ5K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,eAAf,eACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,cACHjC,KAAK,cACLuC,KAAK,OACLF,SAAUuF,EACVxF,MAAOkF,EAAS1G,YAChB4H,UAAQ,KAGZ5K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,gBAAf,uBACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,eACHjC,KAAK,eACLuC,KAAK,SACLF,SAAUuF,EACVxF,MAAOkF,EAASnB,aAChBqC,UAAQ,EACRC,aAAa,sBAGjB7K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOyH,QAAQ,WAAf,YACA3K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE/C,UAAU,eACVkE,GAAG,UACHjC,KAAK,UACLuC,KAAK,OACLF,SAAUuF,EACVxF,MAAOkF,EAASzG,QAChB2H,UAAQ,KAIXd,EAAW1D,OACR0D,EAAWzD,IAAI,SAACyE,GAAD,OACb9K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOsD,IAAKsE,EAAKlG,MAAM,UACpBkG,KAGL,KAMJ9K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kCAAlB,kBCnIHoM,MA7Cf,SAAAxJ,GAAmC,IAAjBuG,EAAiBvG,EAAjBuG,MAAO0B,EAAUjI,EAAViI,OAEvB,OADAlK,QAAQC,MAAM,SAAd,SAAAX,cAAwCkJ,GAAxC,UAAAlJ,cAAkE4K,IAEhEhL,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,KACEjM,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAOH,OAAK,EAACC,KAAK,KAChB/L,EAAAC,EAAAC,cAACsM,EAAD,OAGFxM,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAOH,OAAK,EAACC,KAAK,UAChB/L,EAAAC,EAAAC,cAACuM,EAAD,CAAWnD,MAAOA,KAGpBtJ,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAOH,OAAK,EAACC,KAAK,WAChB/L,EAAAC,EAAAC,cAACwM,EAAD,CAAY1B,OAAQA,KAGtBhL,EAAAC,EAAAC,cAACyM,EAAD,CAAcb,OAAK,EAACC,KAAK,cACvB/L,EAAAC,EAAAC,cAAC0M,EAAD,OAGF5M,EAAAC,EAAAC,cAACyM,EAAD,CAAcb,OAAK,EAACC,KAAK,sBACvB/L,EAAAC,EAAAC,cAAC2M,EAAD,OAGF7M,EAAAC,EAAAC,cAACyM,EAAD,CAAcb,OAAK,EAACC,KAAK,2BACvB/L,EAAAC,EAAAC,cAAC4M,EAAD,OAGF9M,EAAAC,EAAAC,cAACyM,EAAD,CAAcb,OAAK,EAACC,KAAK,SACvB/L,EAAAC,EAAAC,cAAC6M,EAAD,OAGF/M,EAAAC,EAAAC,cAACyM,EAAD,CAAcb,OAAK,EAACC,KAAK,iBACvB/L,EAAAC,EAAAC,cAAC8M,EAAD,OAGFhN,EAAAC,EAAAC,cAACyM,EAAD,CAAcb,OAAK,EAACC,KAAK,YACvB/L,EAAAC,EAAAC,cAAC+M,EAAD,OAGFjN,EAAAC,EAAAC,cAAC+L,EAAA,EAAD,CAAUxL,GAAG,QCqCJyM,UA7EI,SAAAnK,GAAgB,IAAboK,EAAapK,EAAboK,OACZrN,EAAgBC,qBAAWL,GAA3BI,YACRgB,QAAQC,MAAM,aAAc,eAAgBjB,GAFX,IAAA4D,EAILC,oBAAS,GAJJC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAI1B0J,EAJ0BxJ,EAAA,GAIlByJ,EAJkBzJ,EAAA,GAuDjC,OACE5D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAQ0B,MAAM,UAAU0I,MAAI,EAACC,OAAO,KAAKC,OAAK,GAC5CxN,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAASE,IAAKqK,IAAWhN,GAAG,IAAIN,UAAU,gBAA1C,QAIAH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACEyE,QAAS,WACP0F,GAAWD,MAGfpN,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAUkK,OAAQA,EAAQM,QAAM,GAC9B1N,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAK/C,UAAU,UAAUuN,QAAM,GAC5B5N,EA7DPE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAM,SAAA,KACEP,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAASE,IAAKqK,IAAW3B,OAAK,EAACrL,GAAG,cAAlC,cAIFT,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAASE,IAAKqK,IAAW3B,OAAK,EAACrL,GAAG,SAAlC,SAIFT,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAASE,IAAKqK,IAAW3B,OAAK,EAACrL,GAAG,iBAAlC,iBAIFT,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAASE,IAAKqK,IAAW3B,OAAK,EAACrL,GAAG,YAAlC,YAIFT,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAASE,IAAKqK,IAAW3B,OAAK,EAACrL,GAAG,UAAUkH,QAASwF,GAArD,UACUrN,EAAYgC,YAS1B9B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAM,SAAA,KACEP,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAASE,IAAKqK,IAAWhN,GAAG,UAA5B,UAIFT,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAASE,IAAKqK,IAAWhN,GAAG,WAA5B,kBC/BKkN,EArBS,SAACnH,GAA6B,IAAxBoH,EAAwB/H,UAAAO,OAAA,QAAAhC,IAAAyB,UAAA,GAAAA,UAAA,GAAT,KACrCgI,EAAe1B,aAAaC,QAAQ5F,IAAQoH,EADElK,EAG5BC,mBAASkK,GAHmBjK,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAG7CoK,EAH6ClK,EAAA,GAGvCmK,EAHuCnK,EAAA,GAkBpD,OAbAkC,oBACE,WACEhF,QAAQC,MAAM,kCAAmC,QAAS+M,GAE7C,OAATA,EACF3B,aAAa6B,WAAWxH,GAExB2F,aAAa4B,QAAQvH,EAAKsH,IAG9B,CAACtH,EAAKsH,IAGD,CAACA,EAAMC,uyMCyHDE,MAjIf,WAAe,IAAAvK,EACuBC,oBAAS,GADhCC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GACNwK,EADMtK,EAAA,GACMuK,EADNvK,EAAA,GAAAgG,EAE+BjG,mBAAS,IAAIyK,IAAI,KAFhDvE,EAAApH,OAAAoB,EAAA,EAAApB,CAAAmH,EAAA,GAENyE,EAFMxE,EAAA,GAEUyE,EAFVzE,EAAA,GAAAwB,EAGyB1H,mBAAS,MAHlC2H,EAAA7I,OAAAoB,EAAA,EAAApB,CAAA4I,EAAA,GAGNvL,EAHMwL,EAAA,GAGOF,EAHPE,EAAA,GAAAiD,EAIaZ,EAAgB,eAJ7Ba,EAAA/L,OAAAoB,EAAA,EAAApB,CAAA8L,EAAA,GAINnN,EAJMoN,EAAA,GAICC,EAJDD,EAAA,YAAAE,IAAA,OAAAA,EAAAjM,OAAAwC,EAAA,EAAAxC,CAAAkM,IAAAxJ,KA2Db,SAAAC,EAAsBwJ,GAAtB,IAAAC,EAAA,OAAAF,IAAAtJ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGsB9E,EAASsK,OAAO4D,GAHtC,cAGQxN,EAHRkE,EAAAI,KAII+I,EAASrN,GAJbkE,EAAAiC,OAAA,SAKW,CAAEiD,SAAS,IALtB,cAAAlF,EAAAC,KAAA,EAAAD,EAAA7D,GAAA6D,EAAA,SAOIxE,QAAQS,MAAM,gBAAd+D,EAAA7D,IAPJ6D,EAAAiC,OAAA,SAQW,CAAEiD,SAAS,EAAOE,OAAMpF,EAAA7D,KARnC,yBAAA6D,EAAAK,SAAAP,EAAA,kBA3DaQ,MAAA7D,KAAA8D,WAAA,SAAAiJ,IAAA,OAAAA,EAAArM,OAAAwC,EAAA,EAAAxC,CAAAkM,IAAAxJ,KAwEb,SAAA4J,EAAqBC,GAArB,IAAAC,EAAA,OAAAN,IAAAtJ,KAAA,SAAA6J,GAAA,cAAAA,EAAA3J,KAAA2J,EAAA1J,MAAA,cAAA0J,EAAA3J,KAAA,EAAA2J,EAAA1J,KAAA,EAEsB9E,EAAS4I,MAAM0F,GAFrC,cAEQ5N,EAFR8N,EAAAxJ,KAGI+I,EAASrN,GAHb8N,EAAA3H,OAAA,SAIW,CAAEiD,SAAS,IAJtB,cAAA0E,EAAA3J,KAAA,EAAA2J,EAAAzN,GAAAyN,EAAA,SAMIpO,QAAQS,MAAM,eAAd2N,EAAAzN,IANJyN,EAAA3H,OAAA,SAOW,CAAE4H,QAAQ,EAAOzE,OAAMwE,EAAAzN,KAPlC,yBAAAyN,EAAAvJ,SAAAoJ,EAAA,kBAxEanJ,MAAA7D,KAAA8D,WAoFb,SAASmB,EAAgBnE,GACvB,OAAOwL,EAAee,IAAIvM,GAoB5B,OAnGA/B,QAAQC,MACN,MACA,cACAmN,EACA,eACApO,EACA,SACAsB,GAQF0E,oBACE,WAAwB,SAAAuJ,IAAA,OAAAA,EAAA5M,OAAAwC,EAAA,EAAAxC,CAAAkM,IAAAxJ,KAGtB,SAAAa,IAAA,IAAAsJ,EAAAxN,EAAAyN,EAAA,OAAAZ,IAAAtJ,KAAA,SAAA7D,GAAA,cAAAA,EAAA+D,KAAA/D,EAAAgE,MAAA,WACMpE,EADN,CAAAI,EAAAgE,KAAA,gBAAAhE,EAAA+D,KAAA,EAAA+J,EAGyBE,IAAIC,OAAOrO,GAAxBU,EAHZwN,EAGYxN,SAENpB,EAASU,MAAQA,EALvBI,EAAAgE,KAAA,EAM8B9E,EAASgP,eAAe5N,GANtD,OAMUhC,EANV0B,EAAAkE,KAOM0F,EAAetL,GACfwO,EAAkB,IAAIF,IAAItO,EAAYqJ,eAR5C3H,EAAAgE,KAAA,iBAAAhE,EAAA+D,KAAA,GAAA/D,EAAAC,GAAAD,EAAA,SAUMV,QAAQS,MAAM,oCAAdC,EAAAC,IACA2J,EAAe,MAXrB,QAcE+C,GAAc,GAdhB,yBAAA3M,EAAAmE,SAAAK,EAAA,mBAHsBJ,MAAA7D,KAAA8D,WACtB/E,QAAQC,MAAM,6BAA8B,SAAUK,GAoBtD+M,GAAc,GArBQ,WAAAkB,EAAAzJ,MAAA7D,KAAA8D,WAsBtB6J,IAEF,CAACtO,IA2DE8M,EAGHlO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACyP,EAAYC,SAAb,CACEpL,MAAO,CACL1E,cACAsL,iBACApE,kBACAC,WA1BV,SAAoBpE,GACdmE,EAAgBnE,KACpBnC,EAASuG,WAAWnH,EAAYgC,SAAUe,GAC1CyL,EAAkB,IAAIF,IAAJ,GAAAhO,OAAAqC,OAAAoN,EAAA,EAAApN,CAAY4L,GAAZ,CAA4BxL,QAwBtCqE,aApBV,SAAsBrE,GAChBmE,EAAgBnE,KAClBnC,EAASwG,aAAapH,EAAYgC,SAAUe,GAC5CyL,EACE,IAAIF,IAAI3L,OAAAoN,EAAA,EAAApN,CAAI4L,GAAgBnF,OAAO,SAAC7E,GAAD,OAAQA,IAAOxB,UAmBhD7C,EAAAC,EAAAC,cAAC4P,EAAD,CAAY3C,OArEpB,WACE/B,EAAe,MACfqD,EAAS,SAoEHzO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC6P,EAAD,CAAQzG,MAzHL,SAAA1B,GAAA,OAAAkH,EAAAlJ,MAAA7D,KAAA8D,YAyHmBmF,OAzHnB,SAAA7E,GAAA,OAAAuI,EAAA9I,MAAA7D,KAAA8D,kBAyGW7F,EAAAC,EAAAC,cAACuG,EAAD,OCxHNuJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECTNC,IAASC,OAAOtQ,EAAAC,EAAAC,cAACqQ,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.960da805.chunk.js","sourcesContent":["import React from \"react\";\n\n/** Context: provides currentUser object and setter for it throughout app */\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, { useContext } from \"react\";\nimport UserContext from \"../auth/UserContext\";\nimport { Link } from \"react-router-dom\";\n\nconst Homepage = () => {\n  const { currentUser } = useContext(UserContext);\n\n  return (\n    <div className=\"text-center\">\n      <h1 className=\"display-3\">JOBLY</h1>\n      <p className=\"lead\">\n        All of the jobs, all of the times, all of the places.\n      </p>\n\n      <p>\n        {\" \"}\n        {currentUser ? (\n          `Welcome back, ${currentUser.firstName} ${currentUser.lastName}!`\n        ) : (\n          <>\n            <span>Welcome, please </span>\n            <Link to=\"/signup\">signup</Link>\n            <span> or </span> <Link to=\"/login\">login</Link>\n            <span>!</span>\n          </>\n        )}{\" \"}\n      </p>\n    </div>\n  );\n};\n\nexport default Homepage;\n","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n  /**Get the current user. */\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Update a user profile  */\n  static async updateProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.company;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name: name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    console.log(res);\n    return res.company;\n  }\n\n  /** Update details on a company by handle. */\n\n  static async updateCompany(handle, companyData) {\n    let res = await this.request(\n      `companies/${handle}`,\n      { ...companyData },\n      \"patch\"\n    );\n    console.log(res);\n    return res.company;\n  }\n\n  /** Get jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title: title });\n    return res.jobs;\n  }\n\n  /** Apply for a job. */\n  static async applyToJob(username, jobId) {\n    await this.request(`users/${username}/jobs/${jobId}`, {}, \"post\");\n  }\n\n  /** unApply for a job. */\n  static async unApplyToJob(username, jobId) {\n    await this.request(`users/${username}/jobs/${jobId}/unapply`, {}, \"post\");\n  }\n\n  /** Signup for site.  */\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** login to site.  */\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\n// JoblyApi.token =\n//   \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n//   \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n//   \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\nexport default JoblyApi;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, CardBody, CardTitle, CardText } from \"reactstrap\";\nimport \"./CompanyCard.css\";\n\n/** Company card component.\n *\n * Show information about a company\n *\n * CompanyCard is rendered by CompanyList to show a \"card\" for each company.\n *\n * CompanyList -> CompanyCard\n */\n\nconst CompanyCard = ({ handle, name, description, logoUrl }) => {\n  return (\n    <div className=\"mb-3\">\n      <Link to={`/companies/${handle}`} className=\"CompanyCard-link\">\n        <Card body className=\"CompanyCard-card\">\n          <CardBody>\n            <CardTitle tag=\"h5\">{name}</CardTitle>\n            {logoUrl && (\n              <img\n                src={logoUrl}\n                alt={`${handle} logo`}\n                className=\"CompanyCard-logo mb-3\"\n              />\n            )}\n            <CardText>{description}</CardText>\n          </CardBody>\n        </Card>\n      </Link>\n    </div>\n  );\n};\n\nexport default CompanyCard;\n","import React from \"react\";\nimport \"./LoadingSpinner.css\";\n\n/** Loading message used by components that fetch API data. */\n\nfunction LoadingSpinner() {\n  return (\n    <div className=\"row justify-content-center mt-5\">\n      <div className=\"col-auto\">\n        <div className=\"lds-ring\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LoadingSpinner;\n","import React, { useState } from \"react\";\nimport { Input, Button, Form } from \"reactstrap\";\n\n/** Search widget.\n *\n * Appears on CompanyList and JobList to filter results.\n *\n * This component renders the search form and callse the search\n * function prop that runs in the parent component\n *\n * {CompanyList, Joblist} => {SearchForm}\n *\n */\n\nconst SearchForm = ({ searchFor }) => {\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  /* Tell parent to filter */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    searchFor(searchTerm.trim() || undefined);\n    setSearchTerm(searchTerm.trim());\n  };\n\n  /* Update form fields */\n  const handleChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmit} className=\"row g-0 mb-3\">\n        <div className=\"col-sm-8\">\n          <Input\n            id=\"searchTerm\"\n            name=\"searchTerm\"\n            placeholder=\"Enter search term..\"\n            bsSize=\"lg\"\n            value={searchTerm}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"col-sm-4 row g-0\">\n          <Button type=\"submit\" color=\"secondary\" size=\"lg\">\n            Search\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default SearchForm;\n","import React, { useState, useEffect } from \"react\";\nimport JoblyApi from \"../api/api\";\nimport CompanyCard from \"./CompanyCard\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport SearchForm from \"../common/SearchForm\";\n\n/** Show page with all companies listed\n *\n * On component mount, load companies from API\n * Re-load filtered companies on submit of search form.\n *\n * This is routed to path \"/companies\"\n *\n * Routes -> {CompanyCard, SearchForm}\n */\n\nconst CompanyList = () => {\n  console.debug(\"CompanyList\");\n\n  const [companies, setCompanies] = useState(null);\n\n  /* On component mount, load companies from API */\n  useEffect(function getCompaniesOnMount() {\n    console.debug(\"CompanyList useEffect getCompaniesOnMount\");\n\n    async function fetchAllCompanies() {\n      let companies = await JoblyApi.getCompanies();\n      setCompanies(companies);\n    }\n    fetchAllCompanies();\n  }, []);\n\n  async function search(name) {\n    let companies = await JoblyApi.getCompanies(name);\n    setCompanies(companies);\n  }\n\n  if (!companies) return <LoadingSpinner />;\n\n  return (\n    <div className=\"CompanyList col-md-8 offset-md-2\">\n      <SearchForm searchFor={search} />\n\n      {companies.length ? (\n        <div className=\"CompanyList-list\">\n          {companies.map((c) => (\n            <CompanyCard\n              key={c.handle}\n              handle={c.handle}\n              name={c.name}\n              description={c.description}\n              logoUrl={c.logoUrl}\n            />\n          ))}\n        </div>\n      ) : (\n        <p className=\"lead\">Sorry, no results were found!</p>\n      )}\n    </div>\n  );\n};\n\nexport default CompanyList;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n  Table,\n} from \"reactstrap\";\n\n/** Show limited information about a job.\n *\n * Is rendered by JobCardList to show a \"card\" for each job.\n *\n * Receives apply func prop from parent, which is called on apply button click.\n *\n * JobCardList -> JobCard\n */\n\nconst JobCard = ({ id, title, salary, equity, companyName, companyHandle }) => {\n  console.debug(\"JobCard\");\n\n  const { hasAppliedToJob, applyToJob, unApplyToJob } = useContext(UserContext);\n  const [applied, setApplied] = useState(false);\n\n  useEffect(\n    function updateAppliedStatus() {\n      console.debug(\"JobCard useEffect updateAppliedStatus\", \"jobId=\", id);\n\n      setApplied(hasAppliedToJob(id));\n    },\n    [id, hasAppliedToJob]\n  );\n\n  /**Handle applying for a job */\n  async function handleApply(e) {\n    if (hasAppliedToJob(id)) return;\n    applyToJob(id);\n    setApplied(true);\n  }\n\n  /**Handle unApplying for a job */\n  async function handleUnapply(e) {\n    if (hasAppliedToJob(id)) {\n      unApplyToJob(id);\n      setApplied(false);\n    }\n  }\n\n  return (\n    <Card className=\"text-center mb-3\">\n      <CardBody>\n        <CardTitle tag=\"h4\" className=\"mb-3\">\n          {title}\n        </CardTitle>\n        <CardSubtitle className=\"mb-3 text-muted\" tag=\"h5\">\n          <Link to={`/companies/${companyHandle}`}>{companyName}</Link>\n        </CardSubtitle>\n        <div className=\"col-md-8 offset-md-2\">\n          <Table bordered>\n            <tbody>\n              <tr>\n                <th scope=\"row\">Salary</th>\n                <td>${salary}</td>\n              </tr>\n              <tr>\n                <th scope=\"row\">Equity</th>\n                <td>{equity ? `${equity}%` : \"None\"}</td>\n              </tr>\n            </tbody>\n          </Table>\n          {applied ? (\n            <Button\n              color=\"danger\"\n              className=\"px-4 rounded-pill\"\n              onClick={handleUnapply}\n            >\n              Unapply\n            </Button>\n          ) : (\n            <Button\n              color=\"success\"\n              className=\"px-4 rounded-pill\"\n              onClick={handleApply}\n            >\n              Apply\n            </Button>\n          )}\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default JobCard;\n","import React from \"react\";\nimport JobCard from \"./JobCard\";\n\n/** Show list of job cards.\n *\n * Used by both JobList and CompanyDetail to list jobs.\n *\n *\n * JobList -> JobCardList -> JobCard\n * CompanyDetail -> JobCardList -> JobCard\n */\n\nconst JobCardList = ({ jobs }) => {\n  console.debug(\"JobCardList\", \"jobs=\", jobs);\n\n  return (\n    <div>\n      {jobs.map((job) => (\n        <JobCard\n          key={job.id}\n          id={job.id}\n          title={job.title}\n          salary={job.salary}\n          equity={job.equity}\n          companyName={job.companyName}\n          companyHandle={job.companyHandle}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default JobCardList;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport JoblyApi from \"../api/api\";\nimport JobCardList from \"../jobs/JobCardList\";\nimport { Card, CardTitle, CardText, CardBody, Button } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\n/** Company details page.\n *\n * On component mount, load the company from API\n * which includes the jobs for that company\n *\n * This is routed to path \"/companies/:handle\"\n *\n * Routes -> CompanyDetails -> JobCardList\n */\n\nconst CompanyDetails = () => {\n  const { handle } = useParams();\n\n  console.debug(\"CompanyDetails\", \"handle=\", handle);\n  const [company, setCompany] = useState(null);\n\n  /* On component mount, load company from API */\n  useEffect(\n    function getCompanyOnMount() {\n      console.debug(\"CompanyDetails useEffect getCompanyOnMount\");\n\n      async function getCompany() {\n        setCompany(await JoblyApi.getCompany(handle));\n      }\n      getCompany();\n    },\n    [handle]\n  );\n\n  if (!company) return <LoadingSpinner />;\n\n  return (\n    <div>\n      <Card className=\"text-center bg-white p-3 rounded mb-3 col-md-10 offset-md-1\">\n        <CardBody>\n          {company.logoUrl && (\n            <div className=\"col-md-6 offset-md-3\">\n              <img\n                src={company.logoUrl}\n                alt={`${handle} logo`}\n                className=\"mb-3 img-fluid\"\n              />\n            </div>\n          )}\n\n          <CardTitle tag=\"h2\">{company.name}</CardTitle>\n          <CardTitle tag=\"h6\">\n            # of Employees : {company.numEmployees ? company.numEmployees : \"?\"}\n          </CardTitle>\n\n          <CardText className=\"lead\">{company.description}</CardText>\n          <Link to={`/companies/${company.handle}/edit`}>\n            <Button color=\"primary\" className=\"px-4 rounded-pill\">\n              Edit Company Details\n            </Button>\n          </Link>\n        </CardBody>\n      </Card>\n      <div className=\"col-md-8 offset-md-2\">\n        <JobCardList jobs={company.jobs} />\n      </div>\n    </div>\n  );\n};\n\nexport default CompanyDetails;\n","import React, { useState, useEffect } from \"react\";\nimport JoblyApi from \"../api/api\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport SearchForm from \"../common/SearchForm\";\nimport JobCardList from \"./JobCardList\";\n\n/**Show page with all jobs listed\n *\n * On component mount, load jobs from API\n * Re-load filtered jobs on submit of search form.\n *\n * This is routed to path \"/jobs\"\n *\n * Routes -> {JobCard, SearchForm}\n */\n\nconst JobList = () => {\n  console.debug(\"JobList\");\n\n  const [jobs, setJobs] = useState(null);\n\n  /* On component mount, load all jobs from API */\n  useEffect(function getJobsOnMount() {\n    console.debug(\"JobList useEffect getJobsOnMount\");\n    async function fetchJobs() {\n      let jobs = await JoblyApi.getJobs();\n      setJobs(jobs);\n    }\n\n    fetchJobs();\n  }, []);\n\n  /** Reloads jobs on search form submit. */\n  async function search(name) {\n    let jobs = await JoblyApi.getJobs(name);\n    setJobs(jobs);\n  }\n\n  if (!jobs) return <LoadingSpinner />;\n\n  return (\n    <div className=\"row justify-content-center\">\n      <div className=\"col-md-8\">\n        <SearchForm searchFor={search} />\n        {jobs.length ? <JobCardList jobs={jobs} /> : <p>No results found!</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default JobList;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport JoblyApi from \"../api/api\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport JobCardList from \"./JobCardList\";\nimport UserContext from \"../auth/UserContext\";\n\n/**Show page with all jobs user has applied to listed\n *\n * On component mount, load all jobs from API\n * and filter against the current user's job application ids.\n *\n * This is routed to path \"/applications\"\n *\n * Routes -> {JobCard, SearchForm}\n */\n\nconst AppliedJobList = () => {\n  console.debug(\"AppliedJobList\");\n\n  const { currentUser } = useContext(UserContext);\n\n  const [jobs, setJobs] = useState(null);\n\n  /* On component mount, load all jobs from API */\n  useEffect(function getJobsOnMount() {\n    console.debug(\"JobList useEffect getJobsOnMount\");\n    async function fetchJobs() {\n      let jobs = await JoblyApi.getJobs();\n\n      const appliedToJobs = jobs.filter((job) =>\n        currentUser.applications.includes(job.id)\n      );\n      setJobs(appliedToJobs);\n    }\n\n    fetchJobs();\n  }, []);\n\n  console.log(\"CURRENT USER APPLICATIONS\", currentUser.applications);\n\n  if (!jobs) return <LoadingSpinner />;\n\n  return (\n    <div className=\"row justify-content-center\">\n      <h3 className=\"text-center mb-5\">\n        Outstanding Job Applications for {currentUser.username}\n      </h3>\n      <div className=\"col-md-8\">\n        {jobs.length ? (\n          <JobCardList jobs={jobs} />\n        ) : (\n          <p>No jobs applied to yet!</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AppliedJobList;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Form,\n  Label,\n  Input,\n  FormGroup,\n  Alert,\n} from \"reactstrap\";\n\n/** Login form.\n *\n * Shows form and manages updates to state on changes.\n * On submission:\n * - calls login function prop\n * - redirects to \"/\" route\n *\n * Routes -> SignupForm\n * Routed as /login\n */\n\nconst LoginForm = ({ login }) => {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n    \"LoginForm\",\n    \"login=\",\n    typeof login,\n    \"formData=\",\n    formData,\n    \"formErrors=\",\n    formErrors\n  );\n\n  //update state of formData onChange of any form input field\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let result = await login(formData);\n    if (result.success) {\n      history.push(\"/\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  };\n\n  return (\n    <div className=\"row justify-content-center\">\n      <div className=\"col-sm-8\">\n        <Card className=\"px-5 py-3\">\n          <CardBody>\n            <CardTitle className=\"display-4 text-center\">Login</CardTitle>\n\n            <Form onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"username\"\n                  name=\"username\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  required\n                  autoComplete=\"username\"\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  onChange={handleChange}\n                  required\n                  autoComplete=\"current-password\"\n                ></Input>\n              </FormGroup>\n\n              {formErrors.length\n                ? formErrors.map((err) => (\n                    <Alert color=\"danger\" key={err}>\n                      {err}\n                    </Alert>\n                  ))\n                : null}\n\n              <div className=\"row justify-content-end\">\n                <div className=\"col-auto\">\n                  <button className=\"btn btn-primary btn-block px-4\">\n                    submit\n                  </button>\n                </div>\n              </div>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Form,\n  Label,\n  Input,\n  FormGroup,\n  Alert,\n} from \"reactstrap\";\n\n/** Signup form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls signup function prop\n * - redirects to \"/\" route\n *\n * Routes -> SignupForm\n * Routed as /signup\n */\n\nconst SignupForm = ({ signup }) => {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n    \"SignupForm\",\n    \"signup=\",\n    typeof signup,\n    \"formData=\",\n    formData,\n    \"formErrors=\",\n    formErrors\n  );\n\n  //update state of formData onChange of any form input field\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    //signup function passes form data up to <App/>\n    let result = await signup(formData);\n    if (result.success) {\n      history.push(\"/\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  };\n\n  return (\n    <div className=\"row justify-content-center\">\n      <div className=\"col-sm-8\">\n        <Card className=\"px-5 py-3\">\n          <CardBody>\n            <CardTitle className=\"display-4 text-center\">Register</CardTitle>\n\n            <Form onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  name=\"username\"\n                  type=\"text\"\n                  value={formData.username}\n                  onChange={handleChange}\n                  required\n                  className=\"form-control\"\n                  autoComplete=\"username\"\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={handleChange}\n                  required\n                  autoComplete=\"current-password\"\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  type=\"text\"\n                  value={formData.firstName}\n                  onChange={handleChange}\n                  required\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  type=\"text\"\n                  value={formData.lastName}\n                  onChange={handleChange}\n                  required\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"text\"\n                  value={formData.email}\n                  onChange={handleChange}\n                  required\n                ></Input>\n              </FormGroup>\n              {formErrors.length\n                ? formErrors.map((err) => (\n                    <Alert color=\"danger\" key={err}>\n                      {err}\n                    </Alert>\n                  ))\n                : null}\n\n              <div className=\"row justify-content-end\">\n                <div className=\"col-auto\">\n                  <button className=\"btn btn-primary btn-block px-4\">\n                    Register\n                  </button>\n                </div>\n              </div>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState, useContext } from \"react\";\nimport UserContext from \"../auth/UserContext\";\nimport JoblyApi from \"../api/api\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Form,\n  Label,\n  Input,\n  FormGroup,\n  Alert,\n} from \"reactstrap\";\n\n/** Form to edit user profile\n *\n * Displays profile form and handles changes to local form state.\n * Submission of form calls the API to save, and triggers user\n * reloading throughout the site.\n *\n * Confirmation of a successful save is a simple bootsrap <Alert>.\n *\n * Routed as /profile\n * Routes -> ProfileForm -> Alert\n */\n\nconst EditProfileForm = () => {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n\n  const [formData, setFormData] = useState({\n    firstName: currentUser.firstName,\n    lastName: currentUser.lastName,\n    email: currentUser.email,\n    username: currentUser.username,\n    password: \"\",\n  });\n\n  const [formErrors, setFormErrors] = useState([]);\n  const [updateConfirmed, setUpdateConfirmed] = useState(false);\n\n  console.debug(\n    \"ProfileForm\",\n    \"currentUser=\",\n    currentUser,\n    \"formData=\",\n    formData,\n    \"formErrors=\",\n    formErrors,\n    \"updateConfirmed=\",\n    updateConfirmed\n  );\n\n  //update state of formData onChange of any form input field\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n    setFormErrors([]);\n  };\n\n  /**on form submission:\n   * -attempt save to backend & report any errors\n   * -if successful\n   *  -clear previous error messages and password\n   *  - show update-confirmed alert\n   *  - set current user info throughout the site\n   */\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    let profileData = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      password: formData.password,\n    };\n\n    let username = formData.username;\n    let updatedUser;\n\n    try {\n      updatedUser = await JoblyApi.updateProfile(username, profileData);\n    } catch (errors) {\n      debugger;\n      setFormErrors(errors);\n      return;\n    }\n\n    setFormData((fData) => ({ ...fData, password: \"\" }));\n    setFormErrors([]);\n    setUpdateConfirmed(true);\n\n    //trigger reloading of user information throughout the site\n    setCurrentUser(updatedUser);\n  };\n\n  return (\n    <div className=\"row justify-content-center\">\n      <div className=\"col-sm-8\">\n        <Card className=\"px-5 py-3\">\n          <CardBody>\n            <CardTitle className=\"display-4 text-center\">\n              Edit Profile\n            </CardTitle>\n\n            <Form onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label htmlFor=\"username\">Username: {formData.username}</Label>\n              </FormGroup>\n\n              <FormGroup>\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  value={formData.firstName}\n                  required\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  value={formData.lastName}\n                  required\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  value={formData.email}\n                  autoComplete=\"email\"\n                  required\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  onChange={handleChange}\n                  value={formData.password}\n                  required\n                  autoComplete=\"current-password\"\n                ></Input>\n              </FormGroup>\n\n              {formErrors.length\n                ? formErrors.map((err) => (\n                    <Alert key={err} color=\"danger\">\n                      {err}\n                    </Alert>\n                  ))\n                : null}\n\n              {updateConfirmed ? (\n                <Alert type=\"success\">Profile information updated!</Alert>\n              ) : null}\n\n              <div className=\"row justify-content-end\">\n                <div className=\"col-auto\">\n                  <button className=\"btn btn-primary btn-block px-4\">\n                    Update\n                  </button>\n                </div>\n              </div>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default EditProfileForm;\n","import React, { useContext } from \"react\";\nimport UserContext from \"../auth/UserContext\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n/** \"Higher-Order Component\" fro private routes.\n *\n * In routing component, use <PrivateRoute /> instead of <Route />.\n * This component will check if there is a valid current user, only\n * continuing onward to the route if there is. If no user is present,\n * redirect to login form.\n *\n */\n\nconst PrivateRoute = ({ exact, path, children }) => {\n  const { currentUser } = useContext(UserContext);\n\n  console.debug(\n    \"PrivateRoute\",\n    \"exact=\",\n    exact,\n    \"path=\",\n    path,\n    \"currentUser=\",\n    currentUser\n  );\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <Route exact={exact} path={path}>\n      {children}\n    </Route>\n  );\n};\n\nexport default PrivateRoute;\n","import React, { useState, useEffect } from \"react\";\nimport JoblyApi from \"../api/api\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\n// import LoadingSpinner from \"../common/LoadingSpinner\";\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Form,\n  Label,\n  Input,\n  FormGroup,\n  Alert,\n} from \"reactstrap\";\n\n/** Form to edit a company\n *\n * Displays edit company form and handles changes to local form state.\n * Submission of form calls the API to save, and triggers company details\n * reloading throughout the site.\n *\n * Form is used to edit a company's name, description, numEmployyees,\n * and logoUrl\n *\n * Confirmation of a successful save is a simple bootsrap <Alert>.\n *\n * Routed as /company/:handle/edit\n * Routes -> EditCompanyForm -> Alert\n */\n\nconst EditCompanyForm = () => {\n  const { handle } = useParams();\n  const history = useHistory();\n\n  const token = localStorage.getItem(\"jobly-token\");\n  console.log(token);\n  //   const [company, setCompany] = useState(null);\n\n  //   /* On component mount, load company from API to populate form data*/\n  //   useEffect(\n  //     function getCompanyOnMount() {\n  //       console.debug(\"CompanyList useEffect getCompanyOnMount\");\n\n  //       async function getCompany() {\n  //         setCompany(await JoblyApi.getCompany(handle));\n  //       }\n  //       getCompany();\n  //     },\n  //     [handle]\n  //   );\n\n  //   if (!company) return <LoadingSpinner />;\n\n  //   const [formData, setFormData] = useState({\n  //     name: company.name,\n  //     description: company.description,\n  //     numEmployees: company.numEmployees,\n  //     logoUrl: company.logoUrl,\n  //   });\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    numEmployees: \"\",\n    logoUrl: \"\",\n  });\n\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n    \"EditCompanyForm\",\n    \"formData=\",\n    formData,\n    \"formErrors=\",\n    formErrors\n  );\n\n  //update state of formData onChange of any form input field\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n    setFormErrors([]);\n  };\n\n  /**on form submission:\n   * -attempt save to backend & report any errors\n   * -if successful\n   *  -clear previous error messages and password\n   *  - show update-confirmed alert\n   *  - set company info throughout the site\n   */\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    let companyData = {\n      name: formData.name,\n      description: formData.description,\n      numEmployees: +formData.numEmployees,\n      logoUrl: formData.logoUrl,\n    };\n\n    console.log(companyData);\n\n    try {\n      await JoblyApi.updateCompany(handle, companyData);\n      history.push(`/companies/${handle}`);\n    } catch (errors) {\n      debugger;\n      setFormErrors(errors);\n      return;\n    }\n\n    // setFormData((fData) => ({ ...fData, password: \"\" }));\n    setFormErrors([]);\n  };\n\n  return (\n    <div className=\"row justify-content-center\">\n      <div className=\"col-sm-8\">\n        <Card className=\"px-5 py-3\">\n          <CardBody>\n            <CardTitle className=\"display-4 text-center\">\n              Edit Company\n            </CardTitle>\n            <h6 className=\"text-center display-6\">{handle}</h6>\n            <Form onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label htmlFor=\"name\">Company Name :</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  value={formData.name}\n                  required\n                ></Input>\n              </FormGroup>\n\n              <FormGroup>\n                <Label htmlFor=\"description\">Description</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"description\"\n                  name=\"description\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  value={formData.description}\n                  required\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"numEmployees\">Number of Employees</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"numEmployees\"\n                  name=\"numEmployees\"\n                  type=\"number\"\n                  onChange={handleChange}\n                  value={formData.numEmployees}\n                  required\n                  autoComplete=\"current-password\"\n                ></Input>\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"logoUrl\">Logo Url</Label>\n                <Input\n                  className=\"form-control\"\n                  id=\"logoUrl\"\n                  name=\"logoUrl\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  value={formData.logoUrl}\n                  required\n                ></Input>\n              </FormGroup>\n\n              {formErrors.length\n                ? formErrors.map((err) => (\n                    <Alert key={err} color=\"danger\">\n                      {err}\n                    </Alert>\n                  ))\n                : null}\n\n              {/* {updateConfirmed ? (\n                <Alert type=\"success\">Company information updated!</Alert>\n              ) : null} */}\n\n              <div className=\"row justify-content-end\">\n                <div className=\"col-auto\">\n                  <button className=\"btn btn-primary btn-block px-4\">\n                    Update\n                  </button>\n                </div>\n              </div>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default EditCompanyForm;\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Homepage from \"../homepage/Homepage\";\nimport CompanyList from \"../companies/CompanyList\";\nimport CompanyDetails from \"../companies/CompanyDetails\";\nimport JobList from \"../jobs/JobList\";\nimport AppliedJobList from \"../jobs/AppliedJobList\";\nimport LoginForm from \"../auth/LoginForm\";\nimport SignupForm from \"../auth/SignupForm\";\nimport EditProfileForm from \"../profiles/EditProfileForm\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport EditCompanyForm from \"../companies/EditCompanyForm\";\n\n/** Site-wide routes.\n *\n * Accessing some Routes requires a user to be logged in.\n * Those routes are wrapped by <PrivateRoute>, which functions\n * as an authorization component.\n *\n * Visiting a non-existant route redirects to the homepage.\n */\n\nfunction Routes({ login, signup }) {\n  console.debug(\"Routes\", `login=${typeof login}`, `signup=${typeof signup}`);\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Homepage />\n      </Route>\n\n      <Route exact path=\"/login\">\n        <LoginForm login={login} />\n      </Route>\n\n      <Route exact path=\"/signup\">\n        <SignupForm signup={signup} />\n      </Route>\n\n      <PrivateRoute exact path=\"/companies\">\n        <CompanyList />\n      </PrivateRoute>\n\n      <PrivateRoute exact path=\"/companies/:handle\">\n        <CompanyDetails />\n      </PrivateRoute>\n\n      <PrivateRoute exact path=\"/companies/:handle/edit\">\n        <EditCompanyForm />\n      </PrivateRoute>\n\n      <PrivateRoute exact path=\"/jobs\">\n        <JobList />\n      </PrivateRoute>\n\n      <PrivateRoute exact path=\"/applications\">\n        <AppliedJobList />\n      </PrivateRoute>\n\n      <PrivateRoute exact path=\"/profile\">\n        <EditProfileForm />\n      </PrivateRoute>\n\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React, { useContext, useState } from \"react\";\nimport { NavLink as RRNavLink } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\nimport \"./Navigation.css\";\nimport {\n  Navbar,\n  NavItem,\n  NavLink,\n  Nav,\n  NavbarToggler,\n  Collapse,\n} from \"reactstrap\";\n\n/** Navigation bar for site that shows on every page\n *\n * Logged in users see companies, jobs, profile, and logout\n *\n * Logged out users see login and signup\n *\n * Rendered by App.js\n */\n\nconst Navigation = ({ logout }) => {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  function loggedInNav() {\n    return (\n      <>\n        <NavItem>\n          <NavLink tag={RRNavLink} exact to=\"/companies\">\n            Companies\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink tag={RRNavLink} exact to=\"/jobs\">\n            Jobs\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink tag={RRNavLink} exact to=\"/applications\">\n            Applications\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink tag={RRNavLink} exact to=\"/profile\">\n            Profile\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink tag={RRNavLink} exact to=\"/logout\" onClick={logout}>\n            Logout {currentUser.username}\n          </NavLink>\n        </NavItem>\n      </>\n    );\n  }\n\n  function loggedOutNav() {\n    return (\n      <>\n        <NavItem>\n          <NavLink tag={RRNavLink} to=\"/login\">\n            Login\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink tag={RRNavLink} to=\"/signup\">\n            Signup\n          </NavLink>\n        </NavItem>\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <Navbar color=\"primary\" dark expand=\"md\" light>\n        <NavLink tag={RRNavLink} to=\"/\" className=\"navbar-brand\">\n          Home\n        </NavLink>\n\n        <NavbarToggler\n          onClick={() => {\n            setIsOpen(!isOpen);\n          }}\n        />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"ms-auto\" navbar>\n            {currentUser ? loggedInNav() : loggedOutNav()}\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage\n *\n * This creates `item` as state and looks in localStorage for current value.\n * (if not found, defaults to `defaultValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, remove from localStorage\n * - else, update localStorage\n *\n * To the component, this just acts like state that is also synced\n * to/from localStorage:\n *\n * const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nconst useLocalStorage = (key, defaultValue = null) => {\n  const initialValue = localStorage.getItem(key) || defaultValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(\n    function setKeyInLocalStorage() {\n      console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n      if (item === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, item);\n      }\n    },\n    [key, item]\n  );\n\n  return [item, setItem];\n};\n\nexport default useLocalStorage;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./routes-navigation/Routes\";\nimport Navigation from \"./routes-navigation/Navigation\";\nimport UserContext from \"./auth/UserContext\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport jwt from \"jsonwebtoken\";\n\n/** Jobly App.\n *\n * - infoLoaded: has user data been pulled from API?\n *  (this manages the loading spinner)\n *\n * - currentUser: user obj from API used to tell if someone\n *  is logged in. Passed around via context throughout app.\n *\n * - token: for logged in users, this is their auth JWT.\n *   Required to be set for most API calls. This is intially\n *   read from localStorage and synced to there via the\n *   useLocalStorage hook.\n *\n *   App -> Routes\n *\n */\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(\"jobly-token\");\n\n  console.debug(\n    \"App\",\n    \"infoLoaded=\",\n    infoLoaded,\n    \"currentUser=\",\n    currentUser,\n    \"token=\",\n    token\n  );\n\n  /**Load user info from API. loadUserInfo() only runs if user is logged in and has a token.\n   * loadUserInfo() only needs to re-run when a user logs out, so the value of the token\n   * is a depndency for this useEffect().\n   */\n\n  useEffect(\n    function loadUserInfo() {\n      console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n      async function getCurrentUser() {\n        if (token) {\n          try {\n            let { username } = jwt.decode(token);\n            //put token on the API class and us it to call the API\n            JoblyApi.token = token;\n            let currentUser = await JoblyApi.getCurrentUser(username);\n            setCurrentUser(currentUser);\n            setApplicationIds(new Set(currentUser.applications));\n          } catch (err) {\n            console.error(\"App loadUserInfo: problem loading\", err);\n            setCurrentUser(null);\n          }\n        }\n        setInfoLoaded(true);\n      }\n\n      // set infoLoaded to false while async getCurrentUser() is running.\n      setInfoLoaded(false);\n      getCurrentUser();\n    },\n    [token]\n  );\n\n  /** handle user logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** handle user signup.\n   *\n   * Automatically log user in (using setToken(token)) upon signup\n   */\n  async function signup(signupData) {\n    try {\n      //API sends back the token for the new user.\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handle user login */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { sucess: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(jobId) {\n    return applicationIds.has(jobId);\n  }\n\n  /** Apply to a job: make API call and update Set of application IDs. */\n  function applyToJob(jobId) {\n    if (hasAppliedToJob(jobId)) return;\n    JoblyApi.applyToJob(currentUser.username, jobId);\n    setApplicationIds(new Set([...applicationIds, jobId]));\n  }\n\n  /** unApply to a job: make API call and update Set of application IDs. */\n  function unApplyToJob(jobId) {\n    if (hasAppliedToJob(jobId)) {\n      JoblyApi.unApplyToJob(currentUser.username, jobId);\n      setApplicationIds(\n        new Set([...applicationIds].filter((id) => id !== jobId))\n      );\n    }\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <UserContext.Provider\n          value={{\n            currentUser,\n            setCurrentUser,\n            hasAppliedToJob,\n            applyToJob,\n            unApplyToJob,\n          }}\n        >\n          <Navigation logout={logout} />\n          <div className=\"container pt-5\">\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//INCLUDE BOOTSTRAP CSS:\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n//IMPORTING index.css after bootstrap allows for background color to work\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}